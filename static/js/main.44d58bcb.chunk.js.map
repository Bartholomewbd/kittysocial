{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","city","id","react_default","a","createElement","className","src","concat","alt","CardList","kittys","map","user","i","components_Card","key","address","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","children","Component","Scroll","style","overflowY","border","height","App","_this2","fetch","then","response","json","users","_this$props","searchField","onSearchChange","filteredKittys","wordToMatch","filter","regex","RegExp","match","findMatches","length","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","dispatch","e","payload","target","value","Boolean","window","location","hostname","initialState","store","createStore","arguments","undefined","action","assign","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44d58bcb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ name, email, city, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/set_set4/${id}?size=200x200`} alt=\"cat\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>City: {city}</p>\r\n        <p>Email: {email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ kittys }) => {\r\n  return (\r\n    <div>\r\n      {kittys.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={kittys[i].id}\r\n            name={kittys[i].name}\r\n            city={kittys[i].address.city}\r\n            email={kittys[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--g bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search for a Kitty\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Kitty Social has made an OOPSIE</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"600px\"\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\n\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport { setSearchField } from \"../actions\";\r\n\r\nimport \"./app.css\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchField\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: e => dispatch(setSearchField(e.target.value))\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      kittys: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ kittys: users }));\r\n  }\r\n\r\n  render() {\r\n    const { kittys } = this.state;\r\n    const { searchField, onSearchChange } = this.props;\r\n    const findMatches = (wordToMatch, kittys) => {\r\n      return kittys.filter(kittys => {\r\n        const regex = new RegExp(wordToMatch, \"gi\");\r\n        return (\r\n          kittys.name.match(regex) ||\r\n          kittys.address.city.match(regex) ||\r\n          kittys.email.match(regex)\r\n        );\r\n      });\r\n    };\r\n    const filteredKittys = findMatches(searchField, kittys);\r\n\r\n    return !kittys.length ? (\r\n      <h1 className=\"tc\">Loading Kittens</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">Kitty Social</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList kittys={filteredKittys} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import { CHANGE_SEARCHFIELD } from \"./constants.js\";\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCHFIELD,\r\n  payload: text\r\n});\r\n","export const CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCHFIELD } from \"./constants.js\";\r\n\r\nconst initialState = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchKittys = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { searchKittys } from \"./reducers\";\n\nconst store = createStore(searchKittys);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}